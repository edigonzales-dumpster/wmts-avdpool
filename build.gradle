plugins {
	id 'org.springframework.boot' version '2.1.10.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
    id "com.bmuschko.docker-remote-api" version "4.4.1"
}

apply from: "$rootDir/gradle/versioning.gradle"

group = 'ch.so.agi.avdpool'

ext {
    apacheCamelVersion = "3.0.0-RC3"
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
    mavenCentral()
    jcenter()    
    maven { url "http://jars.interlis.ch" } 
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.apache.camel:camel-spring-boot-starter:${apacheCamelVersion}"
    implementation "org.apache.camel:camel-support:${apacheCamelVersion}"   
    implementation "org.apache.camel:camel-ftp:${apacheCamelVersion}"
    implementation "org.apache.camel:camel-mail:${apacheCamelVersion}"	
    implementation "org.apache.camel:camel-zipfile:${apacheCamelVersion}"   
    implementation "ch.interlis:ili2pg:4.3.2"
    implementation "ch.ehi:ehibasics:1.2.0"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

import java.text.SimpleDateFormat
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer.ExposedPort
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

docker {
    registryCredentials {
        username = System.env.dockerRegistryUser
        password = System.env.dockerRegistryPass
    }
}

task buildDockerImage(type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.rootDir
    tags = ["sogis/wmts-avdpool:"+version, "sogis/wmts-avdpool:latest"]
    labels = ["wmts-avdpool.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "wmts-avdpool.git_commit":  getCheckedOutGitCommitHash(), 
            "wmts-avdpool.travis_build": version]    
}

def tags = ["latest", version]

tags.each { tag ->
    def imageTag = tag.toString()
    task "pushDockerImage_$imageTag"(type: DockerPushImage) {
        description = "Push docker image to hub.docker.com: $imageTag"
        imageName =  "sogis/wmts-avdpool:$imageTag"
    }
}

task pushDockerImages() {
    description = "Push docker images to hub.docker.com."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('pushDockerImage_') }
    }    
}

